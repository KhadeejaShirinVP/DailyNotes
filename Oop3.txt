.........Stack and Heap Memory
*When we declare a variable in a .NET application, it allocates some memory in the RAM.
The memory that it allocates in RAM has three things are as follows:
-Name of the variable,
-The data type of the variable, and
-Value of the variable.

*depending on the data type (i.e. depending on the value type and reference type ), 
 the memory may be allocated either in the stack or in the heap memory.
*The Stack Memory allocation and de-allocation in .NET are done using the Last In First Out principle. 
 In other words, we can say that the memory allocation and de-allocation are done only at one end of the memory, i.e., the top of the stack.
 
*The heap memory location does not track running memory. Heap is used for dynamic memory allocation.
*heap memory will be de-allocated by the garbage collector.

*the primitive data types such as int, double, bool, etc. just hold a single value. On the other hand, 
 the reference data types or object data types are complex 
 i.e. an object data type or reference data type can have reference to other objects as well as other primitive data types.

*the reference data type holds references to other multiple values, 
 and each one of them must be stored in memory. Object types need dynamic memory while primitive data types need static memory.
*The Value types are the types that hold both data and memory in the same location. 
 On the other hand, a reference type is a type that has a pointer that points to the actual memory location.
 
*In .NET, when we assign one integer variable value to another integer variable, then it creates a completely different copy in the stack memory.
 So, if you change one variable value, then the other variable will not be affected. In .NET these kinds of data types are called ‘Value types’. 
 So, bool, byte, char, decimal, double, enum, float, long, sbyte, int, short, ulong, struct, uint, ushort are examples of value types.
 
*in Reference Types you change one of them, the other object is also gets affected. These kinds of data types are termed as ‘Reference types’ in .NET. 
 So, class, interface, object, string, and delegate are examples of Reference Types.


**How is the heap memory freed up?
-The memory allocation which is done on the stack is gone when the control moves out from the method 
 i.e once the method completes its execution. On the other hand, the memory allocation which is done on the 
 heap needs to be de-allocated by the garbage collector.

*When an object stored on the heap is no longer used, that means the object does not have any reference pointing, 
then the object is eligible for garbage collection. 
At some point in time, the garbage collector will de-allocate this object from the heap.



 
 
 